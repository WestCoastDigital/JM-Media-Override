<?php

/**
 * Plugin Name: JM Media Override
 * Plugin URI: https://github.com/WestCoastDigital/JM-Media-Override
 * Description: This plugin disables creation of custom image sizes on upload and a function to render images cropped as like on front end.
 * Version: 1.0.0
 * Author: Stormbox
 * Author URI: https://www.stormbox.com.au/
 * License: GPL v2 or later
 * License URI: https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: jm
 */

// Exit if accessed directly.
if (!defined('ABSPATH')) {
    exit;
}


/**
 * jm_disable_image_sizes
 *
 * Adds option to disable custom image sizes in admin Media Settings
 *
 * @return void
 */
function jm_disable_image_sizes()
{
    add_settings_field(
        'jm_disable_image_sizes',
        __('Disable Custom Image Size', 'jm'),
        'jm_disable_image_sizes_option',
        'media',
        'default',
        array('label_for' => 'jm_disable_image_sizes')
    );
    register_setting('media', 'jm_disable_image_sizes');
}
add_action('admin_init', 'jm_disable_image_sizes');

// Display the custom checkbox field
function jm_disable_image_sizes_option()
{
    $checked = get_option('jm_disable_image_sizes') === 'on' ? 'checked' : '';
?>
    <label for="jm_disable_image_sizes">
        <input type="checkbox" id="jm_disable_image_sizes" name="jm_disable_image_sizes" <?php echo $checked; ?> />
    </label>
<?php
}

/**
 * jm_reset_default_sizes
 *
 * This sets the default image sizes to 0 so that WordPress doesn't create them on upload
 *
 * @return void
 */
function jm_reset_default_sizes()
{
    $disabled = get_option('jm_disable_image_sizes');
    if ($disabled === 'on') {
        update_option('thumbnail_size_w', 0);
        update_option('thumbnail_size_h', 0);
        update_option('thumbnail_crop', 0);
        update_option('medium_size_w', 0);
        update_option('medium_size_h', 0);
        update_option('medium_large_size_w', 0);
        update_option('medium_large_size_h', 0);
        update_option('large_size_w', 0);
        update_option('large_size_h', 0);
    } else {
        $image_options = get_option('jm_save_image_options');
        $defaults = array(
            'thumbnail_size_w' => 150,
            'thumbnail_size_h' => 150,
            'medium_size_w' => 300,
            'medium_size_h' => 300,
            'medium_large_size_w' => 768,
            'medium_large_size_h' => 768,
            'large_size_w' => 1024,
            'large_size_h' => 1024,
        );
        if ($image_options) {
            foreach ($image_options as $key => $option) {
                if (isset($key) && intval($key) === 0) {
                    // Reset to default if value is 0
                    update_option($key, $defaults[$key]);
                } else {
                    update_option($key, $option);
                }
            }
        }
    }
}
add_action('init', 'jm_reset_default_sizes');

/**
 * jm_disable_custom_image_sizes
 *
 * This removes all custom image sizes generated by plugins and themes
 *
 * @param  mixed $sizes
 * @return void
 */
function jm_disable_custom_image_sizes($sizes)
{
    $disabled = get_option('jm_disable_image_sizes');
    if ($disabled === 'on') {
        foreach (get_intermediate_image_sizes() as $size) {
            remove_image_size($size);
        }
        global $_wp_additional_image_sizes;
        foreach ($_wp_additional_image_sizes as $size_name => $size_data) {
            remove_image_size($size_name);
        }

        return $sizes;

        // Run WP-CLI command to regenerate thumbnails
        $output = '';
        $return_var = 0;
        exec('wp media regenerate --yes', $output, $return_var);

        // Check the command output and return status
        if ($return_var === 0) {
            add_action('admin_notices', 'jm_images_regenerated_notice');
        } else {
            add_action('admin_notices', 'jm_image_generation_disabled_notice');
        }
    }
}
add_action('init', 'jm_disable_custom_image_sizes', 999);

function jm_disable_image_settings()
{
    $disabled = get_option('jm_disable_image_sizes');
    $js = '';
    if ($disabled === 'on') {
        $js .= '<script type="text/javascript">';
        $js .= 'jQuery(document).ready(function($) {';
        $js .= '$("#thumbnail_size_w").attr("disabled", true);';
        $js .= '$("#thumbnail_size_h").attr("disabled", true);';
        $js .= '$("#thumbnail_size_w").attr("disabled", true);';
        $js .= '$("#thumbnail_crop").attr("disabled", true);';
        $js .= '$("#medium_size_w").attr("disabled", true);';
        $js .= '$("#medium_size_h").attr("disabled", true);';
        $js .= '$("#medium_large_size_w").attr("disabled", true);';
        $js .= '$("#medium_large_size_h").attr("disabled", true);';
        $js .= '$("#large_size_w").attr("disabled", true);';
        $js .= '$("#large_size_h").attr("disabled", true);';
        $js .= '});';
        $js .= '</script>';
    }
    echo $js;
}
add_action('admin_head', 'jm_disable_image_settings');

/**
 * wp_render_image
 *
 *  // TO USE
 * $image_id = 85; // Replace with your image attachment ID
 * $width = 400; // Replace with your desired width in pixels
 * $height = 200; // Replace with your desired height in pixels
 * $crop = 'center'; // Replace with your desired crop position: 'top-left', 'top-center', 'top-right', 'bottom-left', 'bottom-center', 'bottom-right', 'center', or false DEFAULT: false
 * $image = wp_render_image($image_id, $width, $height, $crop);
 * $url = false // Set to true to return just the base64 url and false for img src DEFAULT: false
 * EG: echo wp_render_image(85, 400, 200, 'center');
 *
 * Leaving no crop or setting it to false will scale it along the longest edge
 *
 * @param  mixed $id
 * @param  mixed $width
 * @param  mixed $height
 * @param  mixed $crop
 * @param  mixed $url
 * @return void
 */
function wp_render_image($id, $width, $height, $crop = false, $url = false)
{
    if ($crop) {
        return jm_render_cropped_image($id, $width, $height, $crop, $url);
    } else {
        return jm_render_scaled_image($id, $width, $height, $url);
    }
}

/**
 * jm_render_cropped_image
 *
 * @param  mixed $image_id
 * @param  mixed $width
 * @param  mixed $height
 * @param  mixed $crop_position
 * @param  mixed $url
 * @return void
 */
function jm_render_cropped_image($image_id, $width, $height, $crop_position = false, $url = false)
{
    if (!$image_id || !$width || !$height) {
        return null;
    }

    // Get the file path of the original image
    $file_path = get_attached_file($image_id);


    // Determine the image type
    $image_info = getimagesize($file_path);
    $mime_type = $image_info['mime'];

    // Create an image resource from the original image based on MIME type
    switch ($mime_type) {
        case 'image/jpeg':
            $image = imagecreatefromjpeg($file_path);
            break;
        case 'image/png':
            $image = imagecreatefrompng($file_path);
            break;
        case 'image/webp':
            $image = imagecreatefromwebp($file_path);
            break;
        default:
            // Unsupported image type
            return null;
    }

    if ($image !== false) {
        // Calculate crop position based on chosen position
        $image_width = imagesx($image);
        $image_height = imagesy($image);

        switch ($crop_position) {
            case 'top-left':
                $crop_x = 0;
                $crop_y = 0;
                break;
            case 'top-center':
                $crop_x = ($image_width - $width) / 2;
                $crop_y = 0;
                break;
            case 'top-right':
                $crop_x = $image_width - $width;
                $crop_y = 0;
                break;
            case 'bottom-left':
                $crop_x = 0;
                $crop_y = $image_height - $height;
                break;
            case 'bottom-center':
                $crop_x = ($image_width - $width) / 2;
                $crop_y = $image_height - $height;
                break;
            case 'bottom-right':
                $crop_x = $image_width - $width;
                $crop_y = $image_height - $height;
                break;
            case 'center':
            default:
                $crop_x = ($image_width - $width) / 2;
                $crop_y = ($image_height - $height) / 2;
                break;
        }
        // Create a new cropped image resource
        $cropped_image = imagecrop($image, ['x' => $crop_x, 'y' => $crop_y, 'width' => $width, 'height' => $height]);

        if ($cropped_image !== false) {
            // Start output buffering to capture image data
            ob_start();
            switch ($mime_type) {
                case 'image/jpeg':
                    imagejpeg($cropped_image, null, 100);
                    break;
                case 'image/png':
                    imagepng($cropped_image);
                    break;
                case 'image/webp':
                    imagewebp($cropped_image);
                    break;
                default:
                    // Unsupported image type
                    return null;
            }

            // Get the buffered image data
            $image_data = ob_get_clean();

            // Free up memory
            imagedestroy($image);
            imagedestroy($cropped_image);

            if ($url) {
                return 'data:image/jpeg;base64,' . base64_encode($image_data);
            } else {
                // get the image alt
                $alt = get_post_meta($image_id, '_wp_attachment_image_alt', true);
                // if empty return the title
                if (!$alt || $alt === '') {
                    $alt = get_the_title($image_id);
                }
                return '<img src="data:image/jpeg;base64,' . base64_encode($image_data) . '" alt="' . $alt . '">';
            }
        } else {
            // Handle errors if the image couldn't be cropped
            return null;
        }
    } else {
        // Handle errors if the image couldn't be loaded
        return null;
    }
}


/**
 * jm_render_scaled_image
 *
 * @param  mixed $image_id
 * @param  mixed $width
 * @param  mixed $height
 * @param  mixed $url
 * @return void
 */
function jm_render_scaled_image($image_id, $width, $height, $url = false)
{
    if (!$image_id || (!$width && !$height)) {
        return null;
    }

    // Get the file path of the original image
    $file_path = get_attached_file($image_id);

    // Determine the image type
    $image_info = getimagesize($file_path);
    $mime_type = $image_info['mime'];

    // Create an image resource from the original image based on MIME type
    switch ($mime_type) {
        case 'image/jpeg':
            $image = imagecreatefromjpeg($file_path);
            break;
        case 'image/png':
            $image = imagecreatefrompng($file_path);
            break;
        case 'image/webp':
            $image = imagecreatefromwebp($file_path);
            break;
        default:
            // Unsupported image type
            return null;
    }

    if ($image !== false) {
        // Get the original image's dimensions
        $image_width = imagesx($image);
        $image_height = imagesy($image);

        // Calculate dimensions for resizing without distortion
        if ($width && !$height) {
            $new_width = $width;
            $new_height = ($image_height / $image_width) * $width;
        } elseif (!$width && $height) {
            $new_width = ($image_width / $image_height) * $height;
            $new_height = $height;
        } elseif ($width && $height) {
            $original_aspect = $image_width / $image_height;
            $new_aspect = $width / $height;

            if ($original_aspect >= $new_aspect) {
                $new_height = $width / $original_aspect;
                $new_width = $width;
            } else {
                $new_width = $height * $original_aspect;
                $new_height = $height;
            }
        } else {
            // No width or height provided, return the original image
            return file_get_contents($file_path);
        }

        // Create a new resized image
        $resized_image = imagecreatetruecolor($new_width, $new_height);
        imagecopyresampled($resized_image, $image, 0, 0, 0, 0, $new_width, $new_height, $image_width, $image_height);

        // Start output buffering to capture image data
        ob_start();
        switch ($mime_type) {
            case 'image/jpeg':
                imagejpeg($resized_image, null, 100);
                break;
            case 'image/png':
                imagepng($resized_image);
                break;
            case 'image/webp':
                imagewebp($resized_image);
                break;
            default:
                // Unsupported image type
                return null;
        }

        // Get the buffered image data
        $image_data = ob_get_clean();

        // Free up memory
        imagedestroy($image);
        imagedestroy($resized_image);

        if ($url) {
            return 'data:image/jpeg;base64,' . base64_encode($image_data);
        } else {
            // get the image alt
            $alt = get_post_meta($image_id, '_wp_attachment_image_alt', true);
            // if empty return the title
            if (!$alt || $alt === '') {
                $alt = get_the_title($image_id);
            }
            return '<img src="data:image/jpeg;base64,' . base64_encode($image_data) . '" alt="' . $alt . '">';
        }

        return $image_data; // Return the image data
    } else {
        // Handle errors if the image couldn't be loaded
        return null;
    }
}


/**
 * jm_save_image_options_activation
 *
 * This saves the default image sizes on plugin activation
 *
 * @return void
 */
function jm_save_image_options_activation()
{
    $default_image_options = array(
        'thumbnail_size_w' => get_option('thumbnail_size_w', 150),
        'thumbnail_size_h' => get_option('thumbnail_size_h', 150),
        'medium_size_w' => get_option('medium_size_w', 300),
        'medium_size_h' => get_option('medium_size_h', 300),
        'medium_large_size_w' => get_option('medium_large_size_w', 768),
        'medium_large_size_h' => get_option('medium_large_size_h', 768),
        'large_size_w' => get_option('large_size_w', 1024),
        'large_size_h' => get_option('large_size_h', 1024),
    );

    if (!get_option('jm_save_image_options')) {
        update_option('jm_save_image_options', $default_image_options);
    }
}
register_activation_hook(__FILE__, 'jm_save_image_options_activation');

/**
 * jm_restore_image_options_deactivation
 *
 * Restore image options on deactivation and if 0 then reset to default
 *
 *
 * @return void
 */
function jm_restore_image_options_deactivation()
{
    $options = get_option('jm_save_image_options');
    $defaults = array(
        'thumbnail_size_w' => 150,
        'thumbnail_size_h' => 150,
        'medium_size_w' => 300,
        'medium_size_h' => 300,
        'medium_large_size_w' => 768,
        'medium_large_size_h' => 768,
        'large_size_w' => 1024,
        'large_size_h' => 1024,
    );
    if ($options) {
        foreach ($options as $key => $option) {
            if (isset($key) && intval($key) === 0) {
                // Reset to default if value is 0
                update_option($key, $defaults[$key]);
            } else {
                update_option($key, $option);
            }
        }
    }
    delete_option('jm_save_image_options');
}
register_deactivation_hook(__FILE__, 'jm_restore_image_options_deactivation');

/**
 * jm_images_regenerated_notice
 *
 * Disable image notice
 *
 * @param  mixed $clean
 * @return void
 */
function jm_images_regenerated_notice()
{
    $screen = get_current_screen();
    if ($screen->id === 'options-media') {
        $disabled = get_option('jm_disable_image_sizes');
        if ($disabled === 'on') {
            echo '<div class="notice notice-warning is-dismissible"><p>' . __('Disable Custom Image Size is enabled so custom image sizes will not be generated and images have been cleaned.', 'jm') . '</p></div>';
        } else {
            echo '<div class="notice notice-warning is-dismissible"><p>' . __('Disable Custom Image Size is enabled so custom image sizes will be generated and images have been regenerated.', 'jm') . '</p></div>';
        }
    }
}
function jm_image_generation_disabled_notice()
{
    $screen = get_current_screen();
    if ($screen->id === 'options-media') {
        $disabled = get_option('jm_disable_image_sizes');
        if ($disabled === 'on') {
            echo '<div class="notice notice-warning is-dismissible"><p>' . __('Disable Custom Image Size is enabled so no custom image sizes will be generated.', 'jm') . '</p></div>';
        } else {
            echo '<div class="notice notice-warning is-dismissible"><p>' . __('Disable Custom Image Size is enabled so custom image sizes will be generated.', 'jm') . '</p></div>';
        }
    }
}
